/*
 * configGraph.cpp
 *
 *  Created on: 21-Feb-2016
 *      Author: vibhanshu
 */

#include"Graph.h"
#include"commons.h"
#include"constants.h"
#include"configGraph.h"
#include"configNode.h"
#include"configNodeStorage.h"
#include"configNodeIterator.h"

configGraph::configGraph(Graph* g,int rPos,int vLen,int* vPos,configNodeStorage* stor)  {
	base = stor->getConfigNode(g,rPos,vLen,vPos);
}

bool configGraph::isGPU() {
	return false;
}

edgeType configGraph::adjacent(configNode* a,configNode* b) {

	if( a->cntVacant() == b->cntVacant() )
	{
		// first check if robotPos is different
		bool flag=false; // if it becomes true then rPos is not changed
		if( a->getRobotPos() == b->getRobotPos() )
			flag = true;  // robo position not changed
		int nodeCount = a->cntNodes();
		// now verify for each node
		int p1 = -1 ,p2 = -1;  // mark the position of the nodes where they are different
		int i;
		bool v1,v2;
		for( i=1 ; i<=nodeCount ; i++ )
		{
			v1 = a->isVacant(i);
			v2 = b->isVacant(i);
			if( v1 != v2 )
				if( v1 == false )  // a has obstacle at position i
					p1 = i ;
				else if( v2 == false )  // b has obstacle at position i
					p2 = i ;
		}
		if( p1 == -1 && p2 == -1 && flag == true )   // they are same node
			return NONE;
	} else {	  // check the case if the edge is from one layer to another
		if( a->getRobotPos() != b->getRobotPos() || abs(a->cntVacant()-b->cntVacant())>1 )  // For different source edges, this is not possible
			return NONE;
		int cntr=0;   // count how many pos are different
		int p1 = -1 ;
		int nodeCount = a->cntNodes();
		int i;
		bool v1,v2;
		for( i=1 ; i<=nodeCount ; i++ ) {
			v1 = a->isVacant(i);
			v2 = b->isVacant(i);
			if( v1 != v2 ) {
				cntr++;		 // no. of changes
				if( v1 == true )
					return EXTERNAL;
				else
					return NONE;
			}
		}
	}
}

vector<configNode*> configGraph::getNeighbors(configNode* a) {
	// TODO: Write this function


}
