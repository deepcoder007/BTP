/*
 * configGraph.cpp
 *
 *  Created on: 21-Feb-2016
 *      Author: vibhanshu
 */

#include"Graph.h"
#include"commons.h"
#include"constants.h"
#include"configGraph.h"
#include"configNode.h"
#include"configNodeStorage.h"
#include"configNodeIterator.h"

configGraph::configGraph(Graph* g,int rPos,int vLen,int* vPos,configNodeStorage* stor)  {
	base = stor->getConfigNode(g,rPos,vLen,vPos);
}

bool configGraph::isGPU() {
	return false;
}

edgeType configGraph::adjacent(configNode* a,configNode* b) {
	// TODO: Write this function
	// first check if robotPos is different
	bool flag=false; // if it becomes true then not rPos
	if( a->getRobotPos() == b->getRobotPos() )
		flag = true;  // robo position not changed
	int nodeCount = a->cntNodes();
	// now verify for each node
	int p1,p2;  // mark the position of the nodes where they are different
	int i,j;
	bool v1,v2;
	for( i=1 ; i<=nodeCount ; i++ )
	{
		v1 = a->isVacant(i);
		v2 = b->isVacant(i);
		if( v1 != v2 )
			if( v1 == false )  // a has obstacle at position i
				p1 = i ;
			else if( v1 == true )

	}
}

vector<configNode*> configGraph::getNeighbors(configNode* a) {
	// TODO: Write this function


}
