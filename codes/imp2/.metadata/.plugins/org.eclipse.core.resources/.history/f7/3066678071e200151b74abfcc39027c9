/*
 * configNodeStorage.h
 *
 *  Created on: 21-Feb-2016
 *      Author: vibhanshu
 */

#ifndef CONFIGNODESTORAGE_H_
#define CONFIGNODESTORAGE_H_

#include"constants.h"
#include"commons.h"
#include<vector>
#include"Graph.h"

// CAUTION: Very critical implementation
/*
    A storage structure to hold the configuration nodes
    and also to take care of other operations like hashing
    IMPLEMENTATION:
        Implementation using hashing for performance reason
*/

class configNode;
class configNodeIterator;
class linkList;

// This class is just an interface
class configNodeStorage
{
public:
    virtual ~configNodeStorage();
    Graph* getGraph()=0;
    virtual bool isGPU()=0;
    virtual configNode* getConfigNode(Graph* g,int rPos,int len,int* vPos)=0;
    virtual bool deleteConfigNode(configNode* ptr)=0;       // Deletes this configNode from the structure
    virtual configNodeIterator* getNodesByKey(key_ii key)=0;
    virtual int getCount()=0;	// no. of nodes stored

    // CAUTION: potentially dangerous routines
    virtual void clear()=0;
    virtual void gc()=0;     			    // Garbage Collector: remove the old nodes from the cache
};

// The serial implementation of the configNodeStorage construct
class configNodeStorageNaive: public configNodeStorage
{
private:
	Graph* graph;			// handle of the Graph
    linkList* dt[HASH_KEY1_SZ][HASH_KEY2_SZ];     // A hash to store the data
    int count;				// Counts the number of nodes stored
public:
    configNodeStorageNaive(Graph* g);
    ~configNodeStorageNaive();
    Graph* getGraph();
    bool isGPU();
    configNode* getConfigNode(Graph* g,int rPos,int len,int* vPos); // preferably use this function
    bool deleteConfigNode(configNode* ptr);
    configNodeIterator* getNodesByKey(key_ii key); // in this case a listNodeIt.
    int getCount();

    // CAUTION: potentially dangerous routines, will have performance impact
    void clear();
    void gc();
};

// The GPU implementation of the configNodeStorage
// TODO: implement over GPU
/*
class configNodeStorageCUDA: public configNodeStorage
{
public:
    configNodeStorageCUDA();
    bool isGPU();
    configNode* getConfigNode(Graph* g,int rPos,vector<int> vPos);
    bool deleteConfigNode(configNode* ptr);
    configNodeIterator* getNodesByKey(key_ii key);   // TODO: try to convert keyii to a GPU data type
};
*/

#endif /* CONFIGNODESTORAGE_H_ */
