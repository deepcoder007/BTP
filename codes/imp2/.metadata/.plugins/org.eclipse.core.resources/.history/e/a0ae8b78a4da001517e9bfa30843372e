/*
 * configNodeIterator.cpp
 *
 *  Created on: 21-Feb-2016
 *      Author: vibhanshu
 */

// Implementation  of the config node Iterators
#include"configNodeIterator.h"
#include"configNode.h"
#include<iostream>
using namespace std;

List::~List()
{
	// TODO : Trivial code
}


// A non-trivial constructor
linkList::linkList()
{
    head = NULL;   // to avoid dangling pointers
}

// CAUTION: possible point for memory leak
linkList::~linkList()
{
    while( head != NULL )
        delete_head();
}

void linkList::delete_head()
{
	if( head == NULL )  // EDGE case that the list is empty
		return ;
    if( head->next == head && head->prev == head ) // i.e. single element list
    {
        delete head->info;
        delete head;
        head = NULL;
    } else {
        Node* tmp = head->next;
        tmp->prev = head->prev;
        tmp->prev->next = tmp;
        delete head->info;
        delete head;
        head = tmp;
    }
}

bool linkList::isGPU()
{   return false;   }

bool linkList::isEmpty()
{
    if( head == NULL )
        return true;
    else
        return false;
}

void linkList::insertNode(configNode* data)
{
    if( head == NULL ) {
        head = new Node;
        head->info = data;
        head->prev = head;
        head->next = head;
    } else {
        Node* tmp = new Node;
        tmp->info = data;
        tmp->next = head;
        tmp->prev = head->prev;
        tmp->prev->next = tmp;
        head->prev = tmp ;
        head = tmp;
    }
}

bool linkList::deleteNode(configNode* data)
{
	if( head == NULL )  {   // very critical EDGE case
		return false;
	}
    if(data == head->info) {
        delete_head();
        return true;
    }
    Node* tmp = head;
    bool flag = false;    // if true, means head is already visited
    while( tmp != head || flag == false )
    {
    	if( tmp == head )
    		flag = true;
        if( data == tmp->info ) {
        	break;
        } else {
            tmp = tmp->next;
        }
    }
    if( tmp->info == data ) {
    	head = tmp;
    	delete_head();
    	return true;
    } else {
    	return false;
    }
}

bool linkList::deleteAll()
{
    while( head != NULL )
        delete_head();
    return true;
}

// Returns the "Node" containing the head
Node* linkList::_getHead()
{
    return head;
}

// Returns the "configNode" containing the head
configNode* linkList::getHead()
{
    return head->info;
}

void linkList::moveHead()
{
    head=head->next;
}

//------------------------- Implementation of the Iterator classes below this line --------------------------

configNodeIterator::~configNodeIterator()
{
	// TODO : trivial code
}

linkListIterator::linkListIterator(linkList* lst)
{
//    list=lst;
    head = lst->_getHead(); // the head of the list currently
    curr = head;
    flag = false;  // to check if head is visited
}

// TRIVIAL , for security and completeness purpose
linkListIterator::~linkListIterator()
{
 //   list = 0;
    head = 0;
}

bool linkListIterator::isGPU()
{
    return false;
}

bool linkListIterator::hasNext()
{
	if( head==NULL ) {  // i.e. the empty list
		return false;
	}
	if( curr == head && flag == true  ) {  // head already read
		return false;
	} else {   // any other node
		return true;
	}
}

configNode* linkListIterator::next()
{
    return curr->info;
}

void linkListIterator::pop()
{
	if( curr == head )  // if it was head, mark it read
		flag = true;
    curr = curr->next;
}




