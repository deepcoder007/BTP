/*
 * tmpSrc.cpp
 *
 *  Created on: 22-Feb-2016
 *      Author: vibhanshu
 */
// This source file is just used for experimental demo of the project.
/*
 * I am using this file for testing purpose until we have a clear testing
 * container like googletest or otherwise.
 */

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<string>
#include<set>
#include<cmath>
#include"commons.h"
#include"Graph.h"
#include"configNodeIterator.h"
#include"configNode.h"
#include"configNodeStorage.h"
#include"configGraph.h"
using namespace std;

class configNodeNaive;

int main()
{
	genGraph(7,10);
	return 0;


	cout<<"Starting program"<<endl;
	Graph g;
	g.readGraph("data/graph.dat");
	configNodeStorageNaive stor(&g);  // the storage struct
	int i,j,k;

	configGraph BigGraph;
	int cnt = g.cntNodes()/INT_BIT_SZ+1;
	int cntNodes = g.cntNodes();
	int* vPos = new int[cnt];
	memset(vPos,0,sizeof(vPos));
	// Make all the nodes empty
	for(i=0;i<=cntNodes;i++)  // for all the nodes
	{
		j = i / INT_BIT_SZ;
		k = i % INT_BIT_SZ;
		vPos[j] = ( vPos[j] | (1<<k) );
	}

	configNode* first = stor.getConfigNode(&g,2,cnt,vPos);

	set<configNode*> st = BigGraph.getNeighbors(first);

	set<configNode*> st2,st3;
	set<configNode*>::iterator it1,it2;

	for( i=0; i<4;i++ )	{
		// To check the status before this iteration
		cout<<"-----------------------------------------------------"<<endl;
		cout<<" => After iteration i : "<<i<<endl;
		cout<<" => Number of stored nodes : "<<stor.getCount()<<endl;
		st2.clear();
		for( it1 = st.begin() ; it1 !=st.end() ; it1++ ) {
			st3 = BigGraph.getNeighbors(*it1);
			st2.insert(st3.begin(),st3.end());
		}
		st = st2;
	}

	cout<<"Number of stored nodes : "<<stor.getCount()<<endl;

	set<configNode*> neighbors;
	set<configNode*>::iterator neighborsIt;


	cout<<"-----------Number of stored nodes : "<<stor.getCount()<<endl;

	return 0;
}




