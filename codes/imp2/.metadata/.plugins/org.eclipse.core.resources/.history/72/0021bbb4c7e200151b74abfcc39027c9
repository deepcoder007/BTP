/*
 * tmpSrc.cpp
 *
 *  Created on: 22-Feb-2016
 *      Author: vibhanshu
 */
// This source file is just used for experimental demo of the project.
/*
 * I am using this file for testing purpose until we have a clear testing
 * container like googletest or otherwise.
 */

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<string>
#include<set>
#include"commons.h"
#include"Graph.h"
#include"configNodeIterator.h"
#include"configNode.h"
#include"configNodeStorage.h"
#include"configGraph.h"
using namespace std;

class configNodeNaive;

int main()
{
//	genGraph(2,4);
	cout<<"Starting program"<<endl;
	Graph g;
	g.readGraph("data/graph.dat");
	configNodeStorageNaive stor(&g);  // the storage struct

	int conf;   // we need only 1 int for this sample config
	conf += (1<<1);
	conf += (1<<2);
	conf += (1<<3);
//	conf += (1<<4);
	configNode* tmp2,*tmp1,*tmp3,*tmp4;

	tmp1 = stor.getConfigNode(&g,1,1,&conf);
	tmp1 = stor.getConfigNode(&g,1,1,&conf);
	tmp1 = stor.getConfigNode(&g,1,1,&conf);
	tmp2 = tmp1->robotMove(4);
	tmp3 = tmp1->robotMove(3);
	tmp4 = tmp3->robotMove(2);
	cout<<"Number of stored nodes : "<<stor.getCount()<<endl;

	configGraph BigGraph;
	set<configNode*> neighbors;

	neighbors = BigGraph.getNeighbors(tmp1);
	cout<<"no. of neighbors of tmp1 = "<<neighbors.size()<<endl;
	neighbors = BigGraph.getNeighbors(tmp2);
	cout<<"no. of neighbors of tmp2 = "<<neighbors.size()<<endl;
	neighbors = BigGraph.getNeighbors(tmp3);
	cout<<"no. of neighbors of tmp3 = "<<neighbors.size()<<endl;
	neighbors = BigGraph.getNeighbors(tmp4);
	cout<<"no. of neighbors of tmp4 = "<<neighbors.size()<<endl;
	cout<<endl<<"Addresses of nodes: "<<endl;
	cout<<"tmp1 : "<<tmp1-tmp1<<endl;
	cout<<"tmp2 : "<<tmp2-tmp1<<endl;
	cout<<"tmp3 : "<<tmp3-tmp1<<endl;
	cout<<"tmp4 : "<<tmp4-tmp1<<endl;

	cout<<"list of neighbors: "<<endl;
	set<configNode*> stmp ; set<configNode*>::iterator sit;
	stmp = tmp1->getNeighbors();	cout<<"no. of neighbors of tmp1: "<<stmp.size()<<" : "<<endl;
	for( sit = stmp.begin(); sit!=stmp.end() ; sit++ ) cout<<*sit-tmp1<<" , ";
	cout<<endl;
	stmp = tmp2->getNeighbors();	cout<<"no. of neighbors of tmp2: "<<stmp.size()<<" : "<<endl;
	for( sit = stmp.begin(); sit!=stmp.end() ; sit++ ) cout<<*sit-tmp1<<" , ";
	cout<<endl;
	stmp = tmp3->getNeighbors();	cout<<"no. of neighbors of tmp3: "<<stmp.size()<<" : "<<endl;
	for( sit = stmp.begin(); sit!=stmp.end() ; sit++ ) cout<<*sit-tmp1<<" , ";
	cout<<endl;
	stmp = tmp4->getNeighbors();	cout<<"no. of neighbors of tmp4: "<<stmp.size()<<" : "<<endl;
	for( sit = stmp.begin(); sit!=stmp.end() ; sit++ ) cout<<*sit-tmp1<<" , ";
	cout<<endl;


	return 0;
}




